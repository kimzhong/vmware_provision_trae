---
# VMware Storage Configuration Playbook
# This playbook handles comprehensive storage configuration for VMware environments

- name: "VMware Storage Configuration with Enhanced Architecture"
  hosts: localhost
  gather_facts: true
  vars:
    # Playbook Configuration
    playbook_name: "storage_configuration"
    playbook_version: "2.0.0"
    operation_type: "storage_configuration"
    
    # Core Components Integration
    enable_call_stack_tracking: true
    enable_retry_management: true
    enable_output_management: true
    enable_idempotency_checking: true
    enable_aap_integration: true
    
    # Storage Configuration Settings
    storage_config:
      validate_existing_storage: true
      configure_datastores: true
      configure_storage_policies: true
      configure_vsan: false
      enable_storage_drs: true
      enable_storage_io_control: true
      
    # Performance and Reliability
    performance_config:
      parallel_operations: true
      max_concurrent_operations: 5
      operation_timeout: 1800
      enable_caching: true
      
    # Integration Settings
    integration_config:
      aap_integration: true
      external_monitoring: true
      audit_logging: true
      
  pre_tasks:
    - name: "Display Playbook Information"
      debug:
        msg:
          - "=== VMware Storage Configuration Playbook ==="
          - "Version: {{ playbook_version }}"
          - "Operation: {{ operation_type }}"
          - "Timestamp: {{ ansible_date_time.iso8601 }}"
          - "Target Environment: {{ target_environment | default('development') }}"
          - "Storage Configurations: {{ storage_definitions | length if storage_definitions is defined else 'Not specified' }}"
      tags: ["always", "info"]
    
    - name: "Validate Required Variables"
      assert:
        that:
          - storage_definitions is defined
          - storage_definitions | length > 0
          - vcenter_hostname is defined
          - vcenter_username is defined
          - vcenter_password is defined
        fail_msg: "Required variables for storage configuration are missing"
        success_msg: "All required variables are present"
      tags: ["always", "validation"]

  tasks:
    # === Core Component Initialization ===
    - name: "Initialize Call Stack Manager"
      include_role:
        name: call_stack_manager
      vars:
        call_stack_manager:
          enabled: "{{ enable_call_stack_tracking }}"
          operation_name: "{{ playbook_name }}"
          operation_type: "{{ operation_type }}"
          session_config:
            auto_create_session: true
            session_name: "storage_config_{{ ansible_date_time.epoch }}"
            track_performance: true
            enable_debugging: "{{ debug_mode | default(false) }}"
          integration:
            enable_aap_integration: "{{ enable_aap_integration }}"
            enable_external_monitoring: "{{ integration_config.external_monitoring }}"
      tags: ["always", "initialization", "call_stack"]
    
    - name: "Initialize Output Manager"
      include_role:
        name: output_manager
      vars:
        output_manager:
          enabled: "{{ enable_output_management }}"
          operation_context:
            operation_name: "{{ playbook_name }}"
            operation_type: "{{ operation_type }}"
            session_id: "{{ call_stack_session_id | default('') }}"
          output_config:
            formats: ["json", "yaml", "html"]
            include_performance_data: true
            include_debug_info: "{{ debug_mode | default(false) }}"
            enable_real_time_updates: true
            storage_specific_outputs: true
          integration:
            call_stack_session_id: "{{ call_stack_session_id | default('') }}"
            enable_aap_artifacts: "{{ enable_aap_integration }}"
      tags: ["always", "initialization", "output"]
    
    # === Environment Validation ===
    - name: "Storage Environment Validation"
      include_role:
        name: environment_validation
      vars:
        environment_validation:
          validate_vcenter_connectivity: true
          validate_storage_permissions: true
          validate_datastore_access: true
          validate_storage_hardware: true
          validation_config:
            fail_on_warnings: false
            detailed_reporting: true
            storage_specific_checks: true
      when: storage_config.validate_existing_storage | default(true)
      tags: ["validation", "environment", "storage"]
    
    # === Pre-Configuration Idempotency Check ===
    - name: "Pre-Configuration Idempotency Check"
      include_role:
        name: idempotency_checker
      vars:
        idempotency_checker:
          enabled: "{{ enable_idempotency_checking }}"
          operation_context:
            operation_name: "{{ playbook_name }}"
            operation_type: "{{ operation_type }}"
            session_id: "{{ call_stack_session_id | default('') }}"
          check_config:
            check_types: ["storage_configuration", "datastore_state", "storage_policy_configuration", "vsan_configuration"]
            check_phases: ["pre_execution"]
            detailed_analysis: true
            conflict_detection: true
            storage_specific_checks: true
          integration:
            call_stack_session_id: "{{ call_stack_session_id | default('') }}"
            output_session_id: "{{ output_manager_session_id | default('') }}"
      tags: ["validation", "idempotency", "pre_check", "storage"]
    
    # === Current Storage State Analysis ===
    - name: "Analyze Current Storage State"
      include_role:
        name: vmware_state_check
      vars:
        vmware_state_check:
          check_type: "storage"
          storage_definitions: "{{ storage_definitions }}"
          check_config:
            analyze_datastores: true
            analyze_storage_policies: true
            analyze_vsan_configuration: true
            analyze_storage_drs: true
            analyze_storage_io_control: true
            detailed_state_analysis: true
      tags: ["validation", "state_check", "storage"]
    
    # === Datastore Configuration ===
    - name: "Configure Datastores with Retry Logic"
      include_role:
        name: retry_manager
      vars:
        retry_manager:
          enabled: "{{ enable_retry_management }}"
          operation_config:
            operation_name: "datastore_configuration"
            operation_type: "storage_infrastructure"
            session_id: "{{ call_stack_session_id | default('') }}"
          retry_config:
            max_attempts: 3
            base_delay: 30
            max_delay: 300
            backoff_strategy: "exponential"
            retry_on_failures: ["storage_error", "resource_busy", "configuration_conflict", "datastore_mount_error"]
          target_operation:
            role_name: "vmware_storage_config"
            role_vars:
              operation_mode: "datastore"
              storage_definitions: "{{ storage_definitions }}"
              vcenter_config:
                hostname: "{{ vcenter_hostname }}"
                username: "{{ vcenter_username }}"
                password: "{{ vcenter_password }}"
                datacenter: "{{ vcenter_datacenter | default('') }}"
              datastore_config:
                enable_datastores: "{{ storage_config.configure_datastores }}"
                parallel_configuration: "{{ performance_config.parallel_operations }}"
                max_concurrent: "{{ performance_config.max_concurrent_operations }}"
                timeout: "{{ performance_config.operation_timeout }}"
                enable_validation: true
                enable_storage_drs: "{{ storage_config.enable_storage_drs }}"
                enable_storage_io_control: "{{ storage_config.enable_storage_io_control }}"
          integration:
            call_stack_session_id: "{{ call_stack_session_id | default('') }}"
            output_session_id: "{{ output_manager_session_id | default('') }}"
            idempotency_session_id: "{{ idempotency_checker_session_id | default('') }}"
      when: storage_config.configure_datastores | default(true)
      tags: ["configuration", "datastore", "retry", "storage"]
    
    # === Storage Policy Configuration ===
    - name: "Configure Storage Policies with Retry Logic"
      include_role:
        name: retry_manager
      vars:
        retry_manager:
          enabled: "{{ enable_retry_management }}"
          operation_config:
            operation_name: "storage_policy_configuration"
            operation_type: "storage_configuration"
            session_id: "{{ call_stack_session_id | default('') }}"
          retry_config:
            max_attempts: 3
            base_delay: 20
            max_delay: 180
            backoff_strategy: "exponential"
            retry_on_failures: ["storage_error", "policy_conflict", "resource_busy"]
          target_operation:
            role_name: "vmware_storage_config"
            role_vars:
              operation_mode: "storage_policy"
              storage_definitions: "{{ storage_definitions }}"
              vcenter_config:
                hostname: "{{ vcenter_hostname }}"
                username: "{{ vcenter_username }}"
                password: "{{ vcenter_password }}"
                datacenter: "{{ vcenter_datacenter | default('') }}"
              storage_policy_config:
                enable_storage_policies: "{{ storage_config.configure_storage_policies }}"
                policy_definitions: "{{ storage_policy_definitions | default([]) }}"
                parallel_configuration: "{{ performance_config.parallel_operations }}"
                max_concurrent: "{{ performance_config.max_concurrent_operations }}"
                timeout: "{{ performance_config.operation_timeout }}"
                enable_compliance_checking: true
          integration:
            call_stack_session_id: "{{ call_stack_session_id | default('') }}"
            output_session_id: "{{ output_manager_session_id | default('') }}"
            idempotency_session_id: "{{ idempotency_checker_session_id | default('') }}"
      when: storage_config.configure_storage_policies | default(true)
      tags: ["configuration", "storage_policy", "retry", "storage"]
    
    # === vSAN Configuration ===
    - name: "Configure vSAN with Retry Logic"
      include_role:
        name: retry_manager
      vars:
        retry_manager:
          enabled: "{{ enable_retry_management }}"
          operation_config:
            operation_name: "vsan_configuration"
            operation_type: "storage_configuration"
            session_id: "{{ call_stack_session_id | default('') }}"
          retry_config:
            max_attempts: 3
            base_delay: 60
            max_delay: 600
            backoff_strategy: "exponential"
            retry_on_failures: ["storage_error", "vsan_error", "cluster_error", "resource_busy"]
          target_operation:
            role_name: "vmware_storage_config"
            role_vars:
              operation_mode: "vsan"
              storage_definitions: "{{ storage_definitions }}"
              vcenter_config:
                hostname: "{{ vcenter_hostname }}"
                username: "{{ vcenter_username }}"
                password: "{{ vcenter_password }}"
                datacenter: "{{ vcenter_datacenter | default('') }}"
              vsan_config:
                enable_vsan: "{{ storage_config.configure_vsan }}"
                vsan_cluster_config: "{{ vsan_cluster_config | default({}) }}"
                enable_deduplication: "{{ vsan_enable_deduplication | default(false) }}"
                enable_compression: "{{ vsan_enable_compression | default(false) }}"
                enable_encryption: "{{ vsan_enable_encryption | default(false) }}"
                timeout: "{{ performance_config.operation_timeout }}"
          integration:
            call_stack_session_id: "{{ call_stack_session_id | default('') }}"
            output_session_id: "{{ output_manager_session_id | default('') }}"
            idempotency_session_id: "{{ idempotency_checker_session_id | default('') }}"
      when: storage_config.configure_vsan | default(false)
      tags: ["configuration", "vsan", "retry", "storage"]
    
    # === Storage DRS Configuration ===
    - name: "Configure Storage DRS"
      include_role:
        name: vmware_storage_drs
      vars:
        vmware_storage_drs:
          storage_definitions: "{{ storage_definitions }}"
          storage_drs_config:
            enable_storage_drs: "{{ storage_config.enable_storage_drs }}"
            automation_level: "{{ storage_drs_automation_level | default('fullyAutomated') }}"
            io_load_balancing: "{{ storage_drs_io_load_balancing | default(true) }}"
            space_load_balancing: "{{ storage_drs_space_load_balancing | default(true) }}"
            vm_evacuation: "{{ storage_drs_vm_evacuation | default(true) }}"
            affinity_rules: "{{ storage_drs_affinity_rules | default([]) }}"
          vcenter_config:
            hostname: "{{ vcenter_hostname }}"
            username: "{{ vcenter_username }}"
            password: "{{ vcenter_password }}"
            datacenter: "{{ vcenter_datacenter | default('') }}"
      when: storage_config.enable_storage_drs | default(true)
      tags: ["configuration", "storage_drs", "automation", "storage"]
    
    # === Storage I/O Control Configuration ===
    - name: "Configure Storage I/O Control"
      include_role:
        name: vmware_storage_io_control
      vars:
        vmware_storage_io_control:
          storage_definitions: "{{ storage_definitions }}"
          sioc_config:
            enable_storage_io_control: "{{ storage_config.enable_storage_io_control }}"
            congestion_threshold: "{{ sioc_congestion_threshold | default(30) }}"
            stats_aggregation_disabled: "{{ sioc_stats_aggregation_disabled | default(false) }}"
            reservation_enabled: "{{ sioc_reservation_enabled | default(false) }}"
            vm_io_shares: "{{ sioc_vm_io_shares | default([]) }}"
          vcenter_config:
            hostname: "{{ vcenter_hostname }}"
            username: "{{ vcenter_username }}"
            password: "{{ vcenter_password }}"
            datacenter: "{{ vcenter_datacenter | default('') }}"
      when: storage_config.enable_storage_io_control | default(true)
      tags: ["configuration", "storage_io_control", "performance", "storage"]
    
    # === Storage Performance Optimization ===
    - name: "Optimize Storage Performance"
      include_role:
        name: vmware_storage_optimization
      vars:
        vmware_storage_optimization:
          storage_definitions: "{{ storage_definitions }}"
          optimization_config:
            enable_multipathing: true
            optimize_queue_depth: true
            enable_vaai: true
            optimize_block_size: true
            enable_storage_acceleration: "{{ storage_enable_acceleration | default(false) }}"
            performance_profiles: "{{ storage_performance_profiles | default([]) }}"
          vcenter_config:
            hostname: "{{ vcenter_hostname }}"
            username: "{{ vcenter_username }}"
            password: "{{ vcenter_password }}"
            datacenter: "{{ vcenter_datacenter | default('') }}"
      tags: ["optimization", "performance", "storage"]
    
    # === Post-Configuration Validation ===
    - name: "Post-Configuration Idempotency Check"
      include_role:
        name: idempotency_checker
      vars:
        idempotency_checker:
          enabled: "{{ enable_idempotency_checking }}"
          operation_context:
            operation_name: "{{ playbook_name }}"
            operation_type: "{{ operation_type }}"
            session_id: "{{ call_stack_session_id | default('') }}"
          check_config:
            check_types: ["storage_configuration", "datastore_state", "storage_policy_configuration", "vsan_configuration", "storage_drs_configuration"]
            check_phases: ["post_execution"]
            detailed_analysis: true
            generate_compliance_report: true
            storage_specific_checks: true
          integration:
            call_stack_session_id: "{{ call_stack_session_id | default('') }}"
            output_session_id: "{{ output_manager_session_id | default('') }}"
      tags: ["validation", "idempotency", "post_check", "storage"]
    
    # === Storage Configuration Verification ===
    - name: "Verify Storage Configuration"
      include_role:
        name: vmware_state_check
      vars:
        vmware_state_check:
          check_type: "storage_verification"
          storage_definitions: "{{ storage_definitions }}"
          verification_config:
            verify_datastores: true
            verify_storage_policies: true
            verify_vsan_configuration: true
            verify_storage_drs: true
            verify_storage_io_control: true
            verify_performance_metrics: true
            detailed_verification: true
      tags: ["verification", "storage", "performance"]
    
    # === Storage Health Check ===
    - name: "Perform Storage Health Check"
      include_role:
        name: vmware_storage_health
      vars:
        vmware_storage_health:
          storage_definitions: "{{ storage_definitions }}"
          health_check_config:
            check_datastore_health: true
            check_storage_performance: true
            check_vsan_health: "{{ storage_config.configure_vsan }}"
            check_storage_capacity: true
            check_storage_connectivity: true
            generate_health_report: true
          vcenter_config:
            hostname: "{{ vcenter_hostname }}"
            username: "{{ vcenter_username }}"
            password: "{{ vcenter_password }}"
            datacenter: "{{ vcenter_datacenter | default('') }}"
      tags: ["health_check", "monitoring", "storage"]
    
    # === Status Tracking ===
    - name: "Update Storage Configuration Status"
      include_role:
        name: status_tracking
      vars:
        status_tracking:
          operation_name: "{{ playbook_name }}"
          operation_status: "completed"
          storage_status_list: "{{ configured_storage | default([]) }}"
          tracking_config:
            detailed_status: true
            include_performance_metrics: true
            include_storage_topology: true
            enable_external_updates: "{{ integration_config.external_monitoring }}"
      tags: ["status", "tracking", "storage"]
    
    # === AAP State Management ===
    - name: "AAP State Synchronization"
      include_role:
        name: aap_state_manager
      vars:
        aap_state_manager:
          enabled: "{{ enable_aap_integration }}"
          operation_context:
            operation_name: "{{ playbook_name }}"
            operation_type: "{{ operation_type }}"
            session_id: "{{ call_stack_session_id | default('') }}"
          state_synchronization:
            enabled: true
            mode: "bidirectional"
            sync_job_status: true
            sync_execution_environment: true
            sync_storage_configuration: true
          aap_integration:
            register_artifacts: true
            update_job_status: true
            track_performance: true
            include_storage_topology: true
          integration:
            call_stack_session_id: "{{ call_stack_session_id | default('') }}"
            output_session_id: "{{ output_manager_session_id | default('') }}"
            retry_session_id: "{{ retry_manager_session_id | default('') }}"
            idempotency_session_id: "{{ idempotency_checker_session_id | default('') }}"
      when: enable_aap_integration | default(false)
      tags: ["aap", "state_sync", "integration", "storage"]

  post_tasks:
    # === Final Output Generation ===
    - name: "Generate Storage Configuration Report"
      include_role:
        name: output_manager
      vars:
        output_manager:
          enabled: "{{ enable_output_management }}"
          operation_context:
            operation_name: "{{ playbook_name }}"
            operation_type: "{{ operation_type }}"
            session_id: "{{ call_stack_session_id | default('') }}"
            operation_status: "completed"
          output_config:
            generate_final_report: true
            include_all_sessions: true
            formats: ["json", "yaml", "html"]
            include_performance_summary: true
            include_error_analysis: true
            include_storage_topology: true
            include_capacity_analysis: true
          integration:
            call_stack_session_id: "{{ call_stack_session_id | default('') }}"
            aap_state_session_id: "{{ aap_state_manager_session_id | default('') }}"
            retry_session_id: "{{ retry_manager_session_id | default('') }}"
            idempotency_session_id: "{{ idempotency_checker_session_id | default('') }}"
      tags: ["always", "output", "final_report", "storage"]
    
    # === Session Cleanup ===
    - name: "Finalize Call Stack Session"
      include_role:
        name: call_stack_manager
      vars:
        call_stack_manager:
          enabled: "{{ enable_call_stack_tracking }}"
          operation_context:
            session_id: "{{ call_stack_session_id | default('') }}"
            operation_status: "completed"
          session_config:
            finalize_session: true
            generate_session_summary: true
            cleanup_temporary_data: true
            archive_session_data: true
          integration:
            output_session_id: "{{ output_manager_session_id | default('') }}"
            aap_state_session_id: "{{ aap_state_manager_session_id | default('') }}"
      tags: ["always", "cleanup", "finalization"]
    
    - name: "Display Storage Configuration Summary"
      debug:
        msg:
          - "=== Storage Configuration Completed ==="
          - "Playbook: {{ playbook_name }} v{{ playbook_version }}"
          - "Operation Type: {{ operation_type }}"
          - "Session ID: {{ call_stack_session_id | default('N/A') }}"
          - "Storage Requested: {{ storage_definitions | length if storage_definitions is defined else 0 }}"
          - "Storage Configured: {{ configured_storage | length if configured_storage is defined else 0 }}"
          - "Datastores: {{ configured_datastores | length if configured_datastores is defined else 0 }}"
          - "Storage Policies: {{ configured_storage_policies | length if configured_storage_policies is defined else 0 }}"
          - "vSAN Clusters: {{ configured_vsan_clusters | length if configured_vsan_clusters is defined else 0 }}"
          - "Duration: {{ ansible_date_time.iso8601 }}"
          - "Status: {{ 'SUCCESS' if ansible_failed_result is not defined else 'FAILED' }}"
      tags: ["always", "summary"]

  handlers:
    - name: "Emergency Storage Cleanup"
      include_role:
        name: call_stack_manager
      vars:
        call_stack_manager:
          emergency_cleanup: true
          session_id: "{{ call_stack_session_id | default('') }}"
          cleanup_config:
            cleanup_storage_resources: true
      listen: "emergency_cleanup"
    
    - name: "Rollback Storage Configuration"
      include_role:
        name: vmware_storage_config
      vars:
        vmware_storage_config:
          operation_mode: "rollback"
          rollback_config:
            target_storage: "{{ failed_storage | default([]) }}"
            cleanup_resources: true
            restore_previous_state: true
            rollback_datastores: true
            rollback_storage_policies: true
            rollback_vsan: true
      listen: "rollback_storage_configuration"
      when: storage_config.enable_rollback | default(true)
    
    - name: "Storage Performance Alert"
      debug:
        msg:
          - "PERFORMANCE ALERT: Storage performance issue detected"
          - "Session ID: {{ call_stack_session_id | default('N/A') }}"
          - "Timestamp: {{ ansible_date_time.iso8601 }}"
          - "Review storage performance metrics and configurations"
      listen: "storage_performance_alert"
    
    - name: "Storage Capacity Alert"
      debug:
        msg:
          - "CAPACITY ALERT: Storage capacity threshold exceeded"
          - "Session ID: {{ call_stack_session_id | default('N/A') }}"
          - "Timestamp: {{ ansible_date_time.iso8601 }}"
          - "Review storage capacity and consider expansion"
      listen: "storage_capacity_alert"

# === Playbook Metadata ===
# Version: 2.0.0
# Description: Enhanced VMware storage configuration with version2 core components
# Dependencies: call_stack_manager, output_manager, retry_manager, idempotency_checker, aap_state_manager
# Storage Focus: Datastores, storage policies, vSAN, Storage DRS, Storage I/O Control, performance optimization
# Compatibility: Ansible 2.12+, AAP 4.0+, vSphere 7.0+
# Last Updated: 2024-01-15